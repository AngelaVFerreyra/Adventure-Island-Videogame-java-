//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : SistemaSoftwareVideojuego.java
//  @ Date : 02/05/2021
//  @ Author : 
//
//

package adventureisland;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import static javax.swing.JFrame.EXIT_ON_CLOSE;


public class SistemaSoftwareVideojuego extends JFrame implements ItemListener,ActionListener{
    //Variables para poder crear la ventana principal con su contenido
    private JPanel panelJuego;
    private JPanel panelImagen;
    private JPanel panelLista;
    private List juegos;
    private JButton iniciar;
    private JButton ajustes;
    private JPanel panelAccion;
    private CardLayout cardlayout;
    
    //Variables para poder agregar juegos a la lista establecida
    private JButton b_agregarJuego;
    private JFrame aj_frame;
    private JPanel aj_panel;
    private List aj_lista;
    private JButton b_ok_agregar;
    
    //Variables para poder eliminar juegos de la lista establecida
    private JButton b_eliminarJuego;
    private JFrame ej_frame;
    private JPanel ej_panel;
    private List ej_lista;
    private JButton b_ok_eliminar;
 
    
            
    public static void main(String[] args) throws IOException{
        SistemaSoftwareVideojuego v1 = new SistemaSoftwareVideojuego();
        v1.setVisible(true); //Hacemos visible la ventana
    }
    
    public SistemaSoftwareVideojuego() throws IOException{
        this.setSize(800, 580); //Establecemos el tamaño de la ventana
        this.setTitle("Juegos"); //Inserto el titulo
        this.setLocationRelativeTo(null); //Me ubica la ventana en el centro
        this.setResizable(false); //Establecemos si la ventana puede o no cambiar de tamaño
        
        this.iniciarcomponentes();
        
        this.setDefaultCloseOperation(EXIT_ON_CLOSE); //Para la ejecucion del programa 
    }
    
    private void iniciarcomponentes() throws IOException{
        this.colocarPanel();
        
        this.colocarLista();
        
        this.colocarBotones();
        
    }
    
    private void colocarPanel(){
        panelJuego = new JPanel(); //Creacion de un Panel
        panelJuego.setLayout(null);
        //panelJuego.setBackground(Color.red); //Se estable el color del panel
        this.getContentPane().add(panelJuego);
    }
    
    private void colocarBotones(){
        panelAccion = new JPanel();
        iniciar = new JButton("Iniciar");
        ajustes = new JButton("Ajustes");
        b_agregarJuego = new JButton("Agregar Juego");
        b_eliminarJuego = new JButton("Eliminar Juego");
        b_ok_agregar = new JButton("Agregar");
        b_ok_eliminar = new JButton("Eliminar");
        
        ajustes.addActionListener(this);
        iniciar.addActionListener(this);
        b_agregarJuego.addActionListener(this);
        b_eliminarJuego.addActionListener(this);
        b_ok_agregar.addActionListener(this);
        b_ok_eliminar.addActionListener(this);
        
        panelAccion.add(iniciar);
        panelAccion.add(ajustes);
        panelAccion.add(b_agregarJuego);
        panelAccion.add(b_eliminarJuego);
        this.add(panelAccion,BorderLayout.SOUTH);

    }
    
    private void colocarLista() throws IOException{
        panelLista = new JPanel();
	juegos = new List(10, false);
        
        //Para imagen
        panelImagen = new JPanel();
        panelJuego.add(panelImagen,BorderLayout.CENTER);
        this.getContentPane().add(panelImagen);
        cardlayout=new CardLayout();
        panelImagen.setLayout(cardlayout);
        
        listaVentanaPrincipal();
        juegos.select(0); //Para que se posicione en el primer juego de la lista
    }
    
    private void listaVentanaPrincipal() throws IOException{ //listar de la ventana principal
        //Cargar Lista e Imagen desde el archivo 
        BufferedReader br = null;
        try{
            br = new BufferedReader(new FileReader("AE_Juegos\\Juegos_LVP.txt"));
            String texto = br.readLine();
            int i=0;
            juegos.removeAll();
            while(texto != null){
               juegos.add(texto); //lista
               juegos.select(i); //lista
               panelImagen.add(texto, new Imagen(texto + ".png" , 640, 480)); //imagen
               texto = br.readLine();
               i++;
           }
        }catch(FileNotFoundException e){
            System.out.println("Error: Fichero no encontrado");
            System.out.println(e.getMessage());
        }catch(IOException e){
            System.out.println("Error de lectura del fichero");
            System.out.println(e.getMessage());
        }finally{
            try{
                if(br != null)
                    br.close();
            }catch(IOException e){
                System.out.println("Error al cerrar el fichero");
                System.out.println(e.getMessage());
            }
        }
  
        juegos.addItemListener(this);
        this.add(panelLista,BorderLayout.WEST);
        panelLista.add(juegos);
    }

    
    
    private void iniciar(String juego){
        
        if (juego.equals("AdventureIsland")){
            AdventureIsland game = new AdventureIsland(Ajustes.leerConfiguracion().getProperty("nombreJugador"));
            Thread t = new Thread() {
                @Override
                public void run() {
                    game.run(1.5 / 60.0);
                }
            };
            t.start();
            this.setEnabled(false);
        }else{}
    }
    
/***********************Creamos la ventana Agregar Juego***********************/
    public void ventanaAgregarJuego(){ //Mostras los juegos sin listar de la ventana principal
        aj_frame = new JFrame("Agregar juego");
        aj_frame.setSize(200, 250);
        aj_frame.setLocationRelativeTo(null); //Me ubica la ventana en el centro
        aj_frame.setResizable(false);
        aj_frame.setVisible(true);
        
        aj_panel = new JPanel();
        
        aj_lista = new List(10,false);
        Lista_sinLVP();
    }
        
    public void Lista_sinLVP(){ //Mostras los juegos sin listar de la ventana principal
        //Cargar datos de archivo a la Lista 
        BufferedReader br = null;
        try{
            br = new BufferedReader(new FileReader("AE_Juegos\\Juegos_sinLVP.txt"));
            String texto = br.readLine();
            int i=0;
            aj_lista.removeAll();
            while(texto != null){
               aj_lista.add(texto); //lista
               aj_lista.select(i); //lista
               texto = br.readLine();
               i++;
           }
        }catch (FileNotFoundException e){
            System.out.println("Error: Fichero no encontrado");
            System.out.println(e.getMessage());
        }catch(IOException e){
            System.out.println("Error de lectura del fichero");
            System.out.println(e.getMessage());
        }finally{
            try{
                if(br != null)
                    br.close();
            }catch(IOException e){
                System.out.println("Error al cerrar el fichero");
                System.out.println(e.getMessage());
            }
        }
        aj_lista.addItemListener(this);
        aj_frame.add(aj_panel,BorderLayout.CENTER);
        aj_panel.add(aj_lista);
        aj_panel.add(b_ok_agregar,BorderLayout.SOUTH);
    }

    public void agregarJuego() throws IOException{
        switch (aj_lista.getSelectedItem()) {
            case "AdventureIsland":
                agregar_elemento("AdventureIsland", "AE_Juegos\\Juegos_LVP.txt");
                borrar_elemento("AdventureIsland", "AE_Juegos\\Juegos_sinLVP.txt");
                break;
            case "Pacman":
                agregar_elemento("Pacman", "AE_Juegos\\Juegos_LVP.txt");
                borrar_elemento("Pacman", "AE_Juegos\\Juegos_sinLVP.txt");
                break;
            case "DonkeyKongCountry2":
                agregar_elemento("DonkeyKongCountry2", "AE_Juegos\\Juegos_LVP.txt");
                borrar_elemento("DonkeyKongCountry2", "AE_Juegos\\Juegos_sinLVP.txt");
                break;
            case "Tetris":
                agregar_elemento("Tetris", "AE_Juegos\\Juegos_LVP.txt");
                borrar_elemento("Tetris", "AE_Juegos\\Juegos_sinLVP.txt");
                break;
            case "Tank1990Force":
                agregar_elemento("Tank1990Force", "AE_Juegos\\Juegos_LVP.txt");
                borrar_elemento("Tank1990Force", "AE_Juegos\\Juegos_sinLVP.txt");
                break;
            case "Excitebike":
                agregar_elemento("Excitebike", "AE_Juegos\\Juegos_LVP.txt");
                borrar_elemento("Excitebike", "AE_Juegos\\Juegos_sinLVP.txt");
                break;
            case "Mappy":
                agregar_elemento("Mappy", "AE_Juegos\\Juegos_LVP.txt");
                borrar_elemento("Mappy", "AE_Juegos\\Juegos_sinLVP.txt");
                break;
            case "Popeye":
                agregar_elemento("Popeye", "AE_Juegos\\Juegos_LVP.txt");
                borrar_elemento("Popeye", "AE_Juegos\\Juegos_sinLVP.txt");
                break;
            case "IceClimber":
                agregar_elemento("IceClimber", "AE_Juegos\\Juegos_LVP.txt");
                borrar_elemento("IceClimber", "AE_Juegos\\Juegos_sinLVP.txt");
                break;
            case "RoadFighter":
                agregar_elemento("RoadFighter", "AE_Juegos\\Juegos_LVP.txt");
                borrar_elemento("RoadFighter", "AE_Juegos\\Juegos_sinLVP.txt");
                break;
            default:
                break;
        }
    }
    
    
/***********************Creamos la ventana Eliminar Juego***********************/
    public void ventana_EliminarJuego(){ 
        ej_frame = new JFrame("Eliminar juego");
        ej_frame.setSize(200, 250);
        ej_frame.setLocationRelativeTo(null); //Me ubica la ventana en el centro
        ej_frame.setResizable(false);
        ej_frame.setVisible(true);
        
        ej_panel = new JPanel();
        
        ej_lista = new List(10,false);
        Lista_LVP();
    }
    
    public void Lista_LVP(){ //Mostras los juegos de la ventana principal
        ej_lista.removeAll();
        for(int i = 0; i < juegos.getItemCount() ; i++){
            ej_lista.add(juegos.getItem(i));
            ej_lista.select(i);
        }

        ej_lista.addItemListener(this);
        ej_frame.add(ej_panel,BorderLayout.CENTER);
        ej_panel.add(ej_lista);
        
        ej_panel.add(b_ok_eliminar,BorderLayout.SOUTH);
    }
    
    public void eliminarJuego() throws IOException{
        switch (ej_lista.getSelectedItem()) {
            case "AdventureIsland":
                agregar_elemento("AdventureIsland", "AE_Juegos\\Juegos_sinLVP.txt");
                borrar_elemento("AdventureIsland", "AE_Juegos\\Juegos_LVP.txt");
                break;
            case "Pacman":
                agregar_elemento("Pacman", "AE_Juegos\\Juegos_sinLVP.txt");
                borrar_elemento("Pacman", "AE_Juegos\\Juegos_LVP.txt");
                break;
            case "DonkeyKongCountry2":
                agregar_elemento("DonkeyKongCountry2", "AE_Juegos\\Juegos_sinLVP.txt");
                borrar_elemento("DonkeyKongCountry2", "AE_Juegos\\Juegos_LVP.txt");
                break;
            case "Tetris":
                agregar_elemento("Tetris", "AE_Juegos\\Juegos_sinLVP.txt");
                borrar_elemento("Tetris", "AE_Juegos\\Juegos_LVP.txt");
                break;
            case "Tank1990Force":
                agregar_elemento("Tank1990Force", "AE_Juegos\\Juegos_sinLVP.txt");
                borrar_elemento("Tank1990Force", "AE_Juegos\\Juegos_LVP.txt");
                break;
            case "Excitebike":
                agregar_elemento("Excitebike", "AE_Juegos\\Juegos_sinLVP.txt");
                borrar_elemento("Excitebike", "AE_Juegos\\Juegos_LVP.txt");
                break;
            case "Mappy":
                agregar_elemento("Mappy", "AE_Juegos\\Juegos_sinLVP.txt");
                borrar_elemento("Mappy", "AE_Juegos\\Juegos_LVP.txt");
                break;
            case "Popeye":
                agregar_elemento("Popeye", "AE_Juegos\\Juegos_sinLVP.txt");
                borrar_elemento("Popeye", "AE_Juegos\\Juegos_LVP.txt");
                break;
            case "IceClimber":
                agregar_elemento("IceClimber", "AE_Juegos\\Juegos_sinLVP.txt");
                borrar_elemento("IceClimber", "AE_Juegos\\Juegos_LVP.txt");
                break;
            case "RoadFighter":
                agregar_elemento("RoadFighter", "AE_Juegos\\Juegos_sinLVP.txt");
                borrar_elemento("RoadFighter", "AE_Juegos\\Juegos_LVP.txt");
                break;
            default:
                break;
        }
    }
    
    
/***********************Metodos para agregar y borrar elementos de archivos***********************/
    public void agregar_elemento(String elemento, String nombrearchivo) throws IOException{
        FileWriter archivo = null;
        PrintWriter pw = null;
        try{
            archivo = new FileWriter(nombrearchivo, true);
            pw = new PrintWriter(archivo);
            
            pw.write(elemento + System.lineSeparator());
            

        }catch (IOException e){
            e.printStackTrace();
        }finally{
           try{
                if (null != archivo)
                    archivo.close();
           }catch(IOException e2){
              e2.printStackTrace();
           }
        }
        if("AE_Juegos\\Juegos_LVP.txt".equals(nombrearchivo)){ //boton agregar
            listaVentanaPrincipal();
        }
}
    
    
    public void borrar_elemento(String elemento, String nombrearchivo) throws FileNotFoundException, IOException{
        String linea = null;
        String[] datos = null;
        FileReader fReader = new FileReader(nombrearchivo);
        java.util.List<String> elementos = new ArrayList<String>();
        String s_elemento = null;
   
       
        try{
            try ( //Cargar documento en lista elementos
                BufferedReader br = new BufferedReader(fReader)) {
                int i=0;
                while((linea = br.readLine()) != null) {
                    datos = linea.split(" ");
                    s_elemento = datos[0];
                    elementos.add(s_elemento);
                }
            }
        
            //Borrar elemento de lista
            for(String str : elementos) {
               if(str.equals(elemento)) {
                    elementos.remove(str);
                    break;
               }
            }
        
            try ( //Reescribir documento
                    FileWriter writer = new FileWriter(nombrearchivo)) {
                for(String str : elementos) {
                    writer.write(str + System.lineSeparator());
                }
            }
        
        }catch(IOException e){
            System.out.println(e);   
        }
        if("AE_Juegos\\Juegos_sinLVP.txt".equals(nombrearchivo)){ 
            Lista_sinLVP();
        }else if("AE_Juegos\\Juegos_LVP.txt".equals(nombrearchivo)){
            listaVentanaPrincipal();
            Lista_LVP();
        }
    }
    
    @Override
    public void itemStateChanged(ItemEvent e) {
        cardlayout.show(panelImagen,(String)this.juegos.getSelectedItem());
    }


    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals(ajustes.getActionCommand())){
            this.setEnabled(false);
            Ajustes instance = new Ajustes();
            instance.addWindowListener(new java.awt.event.WindowAdapter(){
                @Override
                public void windowClosing(java.awt.event.WindowEvent e){
                    desbloquearVentana();
                    instance.dispose();
                }
            });
	}
	if(e.getActionCommand().equals(iniciar.getActionCommand())){
            this.iniciar(this.juegos.getSelectedItem());
	}
        if(e.getActionCommand().equals(b_agregarJuego.getActionCommand())){
            this.setEnabled(false);
            this.ventanaAgregarJuego();
            window_DesbDisp(aj_frame);
        }
        if(e.getActionCommand().equals(b_ok_agregar.getActionCommand())){
            try {
                this.agregarJuego();
            } catch (IOException ex) {
                Logger.getLogger(SistemaSoftwareVideojuego.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        if(e.getActionCommand().equals(b_eliminarJuego.getActionCommand())){
            this.setEnabled(false);
            this.ventana_EliminarJuego();
            window_DesbDisp(ej_frame);
	}
        if(e.getActionCommand().equals(b_ok_eliminar.getActionCommand())){
            try {
                eliminarJuego();
            } catch (IOException ex) {
                Logger.getLogger(SistemaSoftwareVideojuego.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void desbloquearVentana(){
	this.setEnabled(true);
    }

    public void window_DesbDisp(JFrame jf_nombre){
        jf_nombre.addWindowListener(new java.awt.event.WindowAdapter(){
                @Override
                public void windowClosing(java.awt.event.WindowEvent e){
                    desbloquearVentana();
                    jf_nombre.dispose();
                }
	});
    }
    
}